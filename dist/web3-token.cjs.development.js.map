{"version":3,"file":"web3-token.cjs.development.js","sources":["../src/libs/timespan.ts","../src/libs/sign/index.ts","../src/libs/verify/decrypter.ts","../src/libs/verify/index.ts","../src/index.ts"],"sourcesContent":["\nimport ms from 'ms'\n\nexport const timeSpan = (val: string | number) => {\n\n    const err_str = '\"expires_in\" argument should be a number of milliseconds or a string representing a timespan eg: \"1d\", \"20h\", 60';\n\n    if (typeof val === 'string') {\n        const milliseconds = ms(val);\n\n        if (typeof milliseconds === 'undefined') {\n            throw new Error(err_str)\n        }\n\n        return new Date(Date.now() + milliseconds);\n    }\n    else if (typeof val === 'number') {\n        return new Date(Date.now() + val);\n    }\n    else {\n        throw new Error(err_str)\n    }\n};","import Base64 from 'base-64';\nimport { timeSpan } from '../timespan';\nimport isValidDomain from 'is-valid-domain';\nimport { SignBody, Signer, SignOpts } from '../interfaces';\n\nfunction isURL(str: string): boolean {\n    try {\n        new URL(str);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport const sign = async (\n    signer: Signer,\n    opts: string | SignOpts = '1d'\n): Promise<string> => {\n\n    const params = typeof opts === 'string' ? {\n        expires_in: opts\n    } : opts;\n\n    validateParams(params);\n\n    const body = processParams(params);\n\n    const msg = buildMessage(body);\n\n    const signature = await signer(msg);\n\n    if (typeof signature !== 'string') {\n        throw new Error('\"signer\" argument should be a function that returns a signature string (Promise<string>)')\n    }\n\n    const token = Base64.encode(JSON.stringify({\n        signature,\n        body: msg,\n    }));\n\n    return token;\n}\n\nconst isValidString = (val: string): boolean => {\n    return typeof val === 'string' && !!val.length;\n}\n\nconst validateParams = (params: SignOpts) => {\n\n    for (const key in params) {\n        if (typeof (params as any)[key] === 'string' && /\\n/.test((params as any)[key])) {\n            throw new Error(`\"${key}\" option cannot have LF (\\\\n)`);\n        }\n    }\n\n    if (params.domain && (!isValidString(params.domain) || !isValidDomain(params.domain))) {\n        throw new Error('Invalid domain format (must be example.com)');\n    }\n\n    if (params.uri !== undefined && (!isValidString(params.uri) || !isURL(params.uri))) {\n        throw new Error('Invalid uri format (must be https://example.com/login)');\n    }\n\n    if (params.chain_id !== undefined && (typeof params.chain_id !== 'number' || isNaN(params.chain_id))) {\n        throw new Error('chain_id must be an int');\n    }\n\n    if (params.expiration_time && !(params.expiration_time instanceof Date)) {\n        throw new Error('expiration_time must be an instance of Date');\n    }\n\n    if (params.not_before && !(params.not_before instanceof Date)) {\n        throw new Error('not_before must be an instance of Date');\n    }\n};\n\nconst processParams = (params: SignOpts): SignBody => {\n\n    const body = {} as SignBody;\n\n    body.web3_token_version = '2'\n    body.issued_at = new Date();\n\n    if (params.expiration_time) {\n        body.expiration_time = new Date(params.expiration_time);\n    }\n\n    if (params.expires_in && !params.expiration_time) {\n        body.expiration_time = timeSpan(params.expires_in);\n    }\n\n    if (!params.expires_in && !params.expiration_time) {\n        body.expiration_time = timeSpan('1d');\n    }\n\n    if (params.not_before) {\n        body.not_before = new Date(params.not_before);\n    }\n\n    if (params.chain_id) {\n        body.chain_id = parseInt(String(params.chain_id));\n    }\n\n    if (!params.uri && typeof window !== 'undefined' && window?.location?.href) {\n        body.uri = window.location.href;\n    }\n\n    if (!params.nonce) {\n        body.nonce = parseInt(String(Math.random() * 99999999));\n    }\n    else {\n        body.nonce = params.nonce;\n    }\n\n    if (params.domain) {\n        body.domain = params.domain;\n    }\n\n    if (params.statement) {\n        body.statement = params.statement;\n    }\n\n    return body;\n};\n\nconst buildMessage = (params: SignBody): string => {\n    const message: string[] = [];\n\n    if (params.domain) {\n        message.push(`${params.domain} wants you to sign in with your Ethereum account.`);\n        message.push('');\n    }\n\n    if (params.statement) {\n        message.push(params.statement);\n        message.push('');\n    }\n\n    const param_labels = {\n        'URI': params.uri,\n        'Web3 Token Version': params.web3_token_version,\n        'Chain ID': params.chain_id,\n        'Nonce': params.nonce,\n        'Issued At': params.issued_at.toISOString(),\n        'Expiration Time': params.expiration_time.toISOString(),\n        'Not Before': params.not_before ? params.not_before.toISOString() : undefined,\n        'Request ID': params.request_id,\n    };\n\n    for (const label in param_labels) {\n\n        if ((param_labels as any)[label] !== undefined) {\n\n            // @ts-ignore\n            message.push(`${label}: ${(param_labels as any)[label]}`)\n        }\n    }\n\n    return message.join('\\n');\n};\n","import Base64 from 'base-64'\nimport {\n    hashPersonalMessage,\n    toBuffer,\n    fromRpcSig,\n    ecrecover,\n    publicToAddress,\n    bufferToHex\n} from 'ethereumjs-util';\nimport toHex from 'to-hex';\nimport { DecrypterResult } from '../interfaces';\n\nconst getVersion = (body: string): number => {\n    // @ts-ignore\n    const [str] = body.match(/Web3[\\s-]+Token[\\s-]+Version: \\d/);\n\n    return Number(str.replace(' ', '').split(':')[1]);\n}\n\nexport const decrypt = (token: string): DecrypterResult => {\n    if (!token || !token.length) {\n        throw new Error('Token required.')\n    }\n\n    const base64_decoded = Base64.decode(token);\n\n    if (!base64_decoded || !base64_decoded.length) {\n        throw new Error('Token malformed (must be base64 encoded)')\n    }\n\n    let body: string, signature: string;\n\n    try {\n        ({ body, signature } = JSON.parse(base64_decoded));\n    } catch (error) {\n        throw new Error('Token malformed (unparsable JSON)')\n    }\n\n    if (!body || !body.length) {\n        throw new Error('Token malformed (empty message)')\n    }\n\n    if (!signature || !signature.length) {\n        throw new Error('Token malformed (empty signature)')\n    }\n\n    const msgBuffer = toBuffer('0x' + toHex(body));\n    const msgHash = hashPersonalMessage(msgBuffer);\n    const signatureBuffer = toBuffer(signature);\n    const signatureParams = fromRpcSig(signatureBuffer as any);\n\n    const publicKey = ecrecover(\n        msgHash,\n        signatureParams.v,\n        signatureParams.r,\n        signatureParams.s\n    );\n    const addressBuffer = publicToAddress(publicKey);\n    const address = bufferToHex(addressBuffer).toLowerCase();\n\n    const version = getVersion(body);\n\n    return {\n        version,\n        address,\n        body,\n        signature\n    }\n}","import parseAsHeaders from 'parse-headers';\nimport { DecryptedBody, MessageSections, VerifyOpts } from '../interfaces';\nimport { decrypt } from './decrypter';\n\nconst getDomain = (sections: MessageSections): string | undefined => {\n    if (/ wants you to sign in with your Ethereum account\\.$/.test(sections[0][0])) {\n        return sections[0][0].replace(\" wants you to sign in with your Ethereum account.\", '').trim();\n    }\n\n    return undefined;\n}\n\nconst splitSections = (lines: string[]): MessageSections => {\n\n    const sections: MessageSections = [[]];\n    let section_number = 0;\n    for (const line of lines) {\n        sections[section_number].push(line)\n        if (line === '') {\n            section_number++;\n            sections.push([])\n        }\n    }\n\n    return sections;\n}\n\nconst getStatement = (sections: MessageSections): string | undefined => {\n\n    if (sections.length === 2) {\n        const has_domain = !!getDomain(sections);\n\n        if (!has_domain) {\n            return sections[0][0]\n        }\n    }\n    else if (sections.length === 3) {\n        return sections[1][0]\n    }\n\n    return undefined;\n}\n\nconst parseBody = (lines: string[]): DecryptedBody => {\n\n    const sections = splitSections(lines);\n    const main_section = sections[sections.length - 1].join('\\n')\n    const parsed_body = parseAsHeaders(main_section) as any;\n\n    for (const key in parsed_body) {\n        const new_key = key.replace(/ /g, '-');\n        parsed_body[new_key] = parsed_body[key];\n        if (new_key !== key) {\n            delete parsed_body[key];\n        }\n    }\n\n    const domain = getDomain(sections);\n    const statement = getStatement(sections);\n\n    if (typeof domain !== 'undefined') {\n        parsed_body.domain = domain\n    }\n\n    if (typeof statement !== 'undefined') {\n        parsed_body.statement = statement\n    }\n\n    if (\n        typeof parsed_body['issued-at'] === 'undefined' ||\n        typeof parsed_body['expiration-time'] === 'undefined' ||\n        typeof parsed_body['web3-token-version'] === 'undefined'\n    ) {\n        throw new Error('Decrypted body is damaged');\n    }\n\n    return parsed_body;\n}\n\nexport const verify = (token: string, opts: VerifyOpts = {}) => {\n\n    const { version, address, body } = decrypt(token);\n\n    if (version === 1) {\n        throw new Error('Tokens version 1 are not supported by the current version of module')\n    }\n\n    const lines = body.split('\\n');\n    const parsed_body = parseBody(lines);\n\n    if (new Date(parsed_body['expiration-time']) < new Date()) {\n        throw new Error('Token expired')\n    }\n\n    if (parsed_body['not-before'] && new Date(parsed_body['not-before']) > new Date()) {\n        throw new Error('It\\'s not yet time to use the token')\n    }\n\n    if (opts.domain && opts.domain !== parsed_body.domain) {\n        throw new Error('Inappropriate token domain')\n    }\n\n    return { address, body: parsed_body }\n}","import { sign } from './libs/sign';\nimport { verify } from './libs/verify';\n\nconst SolvWeb3Token = {\n    sign,\n    verify,\n}\n\nexport default SolvWeb3Token;\nexport { sign, verify };"],"names":["timeSpan","val","err_str","milliseconds","ms","Error","Date","now","isURL","str","URL","sign","signer","opts","params","expires_in","validateParams","body","processParams","msg","buildMessage","signature","token","Base64","encode","JSON","stringify","isValidString","length","key","test","domain","isValidDomain","uri","undefined","chain_id","isNaN","expiration_time","not_before","web3_token_version","issued_at","parseInt","String","window","location","href","nonce","Math","random","statement","message","push","param_labels","toISOString","request_id","label","join","getVersion","match","Number","replace","split","decrypt","base64_decoded","decode","parse","error","msgBuffer","toBuffer","toHex","msgHash","hashPersonalMessage","signatureBuffer","signatureParams","fromRpcSig","publicKey","ecrecover","v","r","s","addressBuffer","publicToAddress","address","bufferToHex","toLowerCase","version","getDomain","sections","trim","splitSections","lines","section_number","line","getStatement","has_domain","parseBody","main_section","parsed_body","parseAsHeaders","new_key","verify","SolvWeb3Token"],"mappings":"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"}