{"version":3,"file":"web3-token.esm.js","sources":["../src/libs/timespan.ts","../src/libs/sign/index.ts","../src/libs/verify/decrypter.ts","../src/libs/verify/index.ts","../src/index.ts"],"sourcesContent":["\nimport ms from 'ms'\n\nexport const timeSpan = (val: string | number) => {\n\n    const err_str = '\"expires_in\" argument should be a number of milliseconds or a string representing a timespan eg: \"1d\", \"20h\", 60';\n\n    if (typeof val === 'string') {\n        const milliseconds = ms(val);\n\n        if (typeof milliseconds === 'undefined') {\n            throw new Error(err_str)\n        }\n\n        return new Date(Date.now() + milliseconds);\n    }\n    else if (typeof val === 'number') {\n        return new Date(Date.now() + val);\n    }\n    else {\n        throw new Error(err_str)\n    }\n};","import Base64 from 'base-64';\nimport { timeSpan } from '../timespan';\nimport isValidDomain from 'is-valid-domain';\nimport { SignBody, Signer, SignOpts } from '../interfaces';\n\nfunction isURL(str: string): boolean {\n  try {\n    new URL(str);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const sign = async (signer: Signer, opts: string | SignOpts = '1d'): Promise<string> => {\n  const params =\n    typeof opts === 'string'\n      ? {\n          expires_in: opts,\n        }\n      : opts;\n\n  validateParams(params);\n\n  const body = processParams(params);\n\n  const msg = buildMessage(body);\n\n  const signature = await signer(msg);\n\n  if (typeof signature !== 'string') {\n    throw new Error('\"signer\" argument should be a function that returns a signature string (Promise<string>)');\n  }\n\n  const token = Base64.encode(\n    JSON.stringify({\n      signature,\n      body: msg,\n    })\n  );\n\n  return token;\n};\n\nconst isValidString = (val: string): boolean => {\n  return typeof val === 'string' && !!val.length;\n};\n\nconst validateParams = (params: SignOpts) => {\n  // for (const key in params) {\n  //     if (typeof (params as any)[key] === 'string' && /\\n/.test((params as any)[key])) {\n  //         throw new Error(`\"${key}\" option cannot have LF (\\\\n)`);\n  //     }\n  // }\n\n  if (params.domain && (!isValidString(params.domain) || !isValidDomain(params.domain))) {\n    throw new Error('Invalid domain format (must be example.com)');\n  }\n\n  if (params.uri !== undefined && (!isValidString(params.uri) || !isURL(params.uri))) {\n    throw new Error('Invalid uri format (must be https://example.com/login)');\n  }\n\n  if (params.chain_id !== undefined && (typeof params.chain_id !== 'number' || isNaN(params.chain_id))) {\n    throw new Error('chain_id must be an int');\n  }\n\n  if (params.expiration_time && !(params.expiration_time instanceof Date)) {\n    throw new Error('expiration_time must be an instance of Date');\n  }\n\n  if (params.not_before && !(params.not_before instanceof Date)) {\n    throw new Error('not_before must be an instance of Date');\n  }\n};\n\nconst processParams = (params: SignOpts): SignBody => {\n  const body = {} as SignBody;\n\n  body.web3_token_version = '2';\n  body.issued_at = new Date();\n\n  if (params.expiration_time) {\n    body.expiration_time = new Date(params.expiration_time);\n  }\n\n  if (params.expires_in && !params.expiration_time) {\n    body.expiration_time = timeSpan(params.expires_in);\n  }\n\n  if (!params.expires_in && !params.expiration_time) {\n    body.expiration_time = timeSpan('1d');\n  }\n\n  if (params.not_before) {\n    body.not_before = new Date(params.not_before);\n  }\n\n  if (params.chain_id) {\n    body.chain_id = parseInt(String(params.chain_id));\n  }\n\n  if (!params.uri && typeof window !== 'undefined' && window?.location?.href) {\n    body.uri = window.location.href;\n  }\n\n  if (!params.nonce) {\n    body.nonce = parseInt(String(Math.random() * 99999999));\n  } else {\n    body.nonce = params.nonce;\n  }\n\n  if (params.domain) {\n    body.domain = params.domain;\n  }\n\n  if (params.statement) {\n    body.statement = params.statement;\n  }\n\n  return body;\n};\n\nconst buildMessage = (params: SignBody): string => {\n  const message: string[] = [];\n\n  if (params.domain) {\n    message.push(`${params.domain} wants you to sign in with your Ethereum account.`);\n    message.push('');\n  }\n\n  if (params.statement) {\n    message.push(params.statement);\n    message.push('');\n  }\n\n  const param_labels = {\n    URI: params.uri,\n    'Web3 Token Version': params.web3_token_version,\n    'Chain ID': params.chain_id,\n    Nonce: params.nonce,\n    'Issued At': params.issued_at.toISOString(),\n    'Expiration Time': params.expiration_time.toISOString(),\n    'Not Before': params.not_before ? params.not_before.toISOString() : undefined,\n    'Request ID': params.request_id,\n  };\n\n  for (const label in param_labels) {\n    if ((param_labels as any)[label] !== undefined) {\n      // @ts-ignore\n      message.push(`${label}: ${(param_labels as any)[label]}`);\n    }\n  }\n\n  return message.join('\\n');\n};\n","import Base64 from 'base-64'\nimport {\n    hashPersonalMessage,\n    toBuffer,\n    fromRpcSig,\n    ecrecover,\n    publicToAddress,\n    bufferToHex\n} from 'ethereumjs-util';\nimport toHex from 'to-hex';\nimport { DecrypterResult } from '../interfaces';\n\nconst getVersion = (body: string): number => {\n    // @ts-ignore\n    const [str] = body.match(/Web3[\\s-]+Token[\\s-]+Version: \\d/);\n\n    return Number(str.replace(' ', '').split(':')[1]);\n}\n\nexport const decrypt = (token: string, contractSignerAddress: string = ''): DecrypterResult => {\n    if (!token || !token.length) {\n        throw new Error('Token required.')\n    }\n    let address: string = contractSignerAddress;\n    const base64_decoded = Base64.decode(token);\n\n    if (!base64_decoded || !base64_decoded.length) {\n        throw new Error('Token malformed (must be base64 encoded)')\n    }\n\n    let body: string, signature: string;\n\n    try {\n        ({ body, signature } = JSON.parse(base64_decoded));\n    } catch (error) {\n        throw new Error('Token malformed (unparsable JSON)')\n    }\n\n    if (!body || !body.length) {\n        throw new Error('Token malformed (empty message)')\n    }\n    if ('' == contractSignerAddress) {\n        if (!signature || !signature.length) {\n            throw new Error('Token malformed (empty signature)')\n        }\n\n        const msgBuffer = toBuffer('0x' + toHex(body));\n        const msgHash = hashPersonalMessage(msgBuffer);\n        const signatureBuffer = toBuffer(signature);\n        const signatureParams = fromRpcSig(signatureBuffer as any);\n\n\n        const publicKey = ecrecover(\n            msgHash,\n            signatureParams.v,\n            signatureParams.r,\n            signatureParams.s\n        );\n        const addressBuffer = publicToAddress(publicKey);\n        const userAddress = bufferToHex(addressBuffer).toLowerCase();\n        address = userAddress;\n    }\n    const version = getVersion(body);\n\n    return {\n        version,\n        address,\n        body,\n        signature\n    }\n}","import parseAsHeaders from 'parse-headers';\nimport { DecryptedBody, MessageSections, VerifyOpts } from '../interfaces';\nimport { decrypt } from './decrypter';\n\nconst getDomain = (sections: MessageSections): string | undefined => {\n    if (/ wants you to sign in with your Ethereum account\\.$/.test(sections[0][0])) {\n        return sections[0][0].replace(\" wants you to sign in with your Ethereum account.\", '').trim();\n    }\n\n    return undefined;\n}\n\nconst splitSections = (lines: string[]): MessageSections => {\n\n    const sections: MessageSections = [[]];\n    let section_number = 0;\n    for (const line of lines) {\n        sections[section_number].push(line)\n        if (line === '') {\n            section_number++;\n            sections.push([])\n        }\n    }\n\n    return sections;\n}\n\nconst getStatement = (sections: MessageSections): string | undefined => {\n\n    if (sections.length === 2) {\n        const has_domain = !!getDomain(sections);\n\n        if (!has_domain) {\n            return sections[0][0]\n        }\n    }\n    else if (sections.length === 3) {\n        return sections[1][0]\n    }\n\n    return undefined;\n}\n\nconst parseBody = (lines: string[]): DecryptedBody => {\n\n    const sections = splitSections(lines);\n    const main_section = sections[sections.length - 1].join('\\n')\n    const parsed_body = parseAsHeaders(main_section) as any;\n\n    for (const key in parsed_body) {\n        const new_key = key.replace(/ /g, '-');\n        parsed_body[new_key] = parsed_body[key];\n        if (new_key !== key) {\n            delete parsed_body[key];\n        }\n    }\n\n    const domain = getDomain(sections);\n    const statement = getStatement(sections);\n\n    if (typeof domain !== 'undefined') {\n        parsed_body.domain = domain\n    }\n\n    if (typeof statement !== 'undefined') {\n        parsed_body.statement = statement\n    }\n\n    if (\n        typeof parsed_body['issued-at'] === 'undefined' ||\n        typeof parsed_body['expiration-time'] === 'undefined' ||\n        typeof parsed_body['web3-token-version'] === 'undefined'\n    ) {\n        throw new Error('Decrypted body is damaged');\n    }\n\n    return parsed_body;\n}\n\nexport const verify = (token: string, opts: VerifyOpts = {\n    address: ''\n}) => {\n\n    const { version, address, body } = decrypt(token, opts.address);\n\n    if (version === 1) {\n        throw new Error('Tokens version 1 are not supported by the current version of module')\n    }\n\n    const lines = body.split('\\n');\n    const parsed_body = parseBody(lines);\n\n    if (new Date(parsed_body['expiration-time']) < new Date()) {\n        throw new Error('Token expired')\n    }\n\n    if (parsed_body['not-before'] && new Date(parsed_body['not-before']) > new Date()) {\n        throw new Error('It\\'s not yet time to use the token')\n    }\n\n    if (opts.domain && opts.domain !== parsed_body.domain) {\n        throw new Error('Inappropriate token domain')\n    }\n\n    return { address, body: parsed_body }\n}","import { sign } from './libs/sign';\nimport { verify } from './libs/verify';\n\nconst SolvWeb3Token = {\n    sign,\n    verify,\n}\n\nexport default SolvWeb3Token;\nexport { sign, verify };"],"names":["timeSpan","val","err_str","milliseconds","ms","Error","Date","now","isURL","str","URL","sign","signer","opts","params","expires_in","validateParams","body","processParams","msg","buildMessage","signature","token","Base64","encode","JSON","stringify","isValidString","length","domain","isValidDomain","uri","undefined","chain_id","isNaN","expiration_time","not_before","web3_token_version","issued_at","parseInt","String","window","location","href","nonce","Math","random","statement","message","push","param_labels","URI","Nonce","toISOString","request_id","label","join","getVersion","match","Number","replace","split","decrypt","contractSignerAddress","address","base64_decoded","decode","parse","error","msgBuffer","toBuffer","toHex","msgHash","hashPersonalMessage","signatureBuffer","signatureParams","fromRpcSig","publicKey","ecrecover","v","r","s","addressBuffer","publicToAddress","userAddress","bufferToHex","toLowerCase","version","getDomain","sections","test","trim","splitSections","lines","section_number","line","getStatement","has_domain","parseBody","main_section","parsed_body","parseAsHeaders","key","new_key","verify","SolvWeb3Token"],"mappings":"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"}